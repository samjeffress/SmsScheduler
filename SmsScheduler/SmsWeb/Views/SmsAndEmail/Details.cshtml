@using SmsTrackingModels
@model SmsWeb.Models.CoordinatorOverview

@{
    ViewBag.Title = "SMS And Email Scheduling : " + Model.Topic;
    Layout = "~/Views/shared/_BootstrapLayout.basic.cshtml";
}

@Styles.Render("~/Content/themes/base/jquery-ui.css")
<script type="text/javascript" src="~/Scripts/jquery-ui-timepicker-addon.js" ></script>
<script type="text/javascript" src="~/Scripts/jstz-1.0.4.min.js"></script>
<script type="text/javascript" src="~/Scripts/tinysort-1.5.2.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>

<script type="text/javascript">
    function setupProgressBar(sentMessages, failedMessages, scheduledMessages, pausedMessages, waitingforSchedulingMessages, cancelledMessages) { 
        updateProgressBarSection(totalMessages, cancelledMessages, "progress_cancelled");
        updateProgressBarSection(totalMessages, waitingforSchedulingMessages, "progress_waiting");
        updateProgressBarSection(totalMessages, pausedMessages, "progress_paused");
        updateProgressBarSection(totalMessages, failedMessages, "progress_failed");
        updateProgressBarSection(totalMessages, sentMessages, "progress_success");
        updateProgressBarSection(totalMessages, scheduledMessages, "progress_scheduled");
    };

    function updateProgressBarSection(totalMessageCount, sectionMessageCount, divId) {
        var sectionPercentage = sectionMessageCount / totalMessages * 100;
        $('#' + divId).width(sectionPercentage + "%");
        $('#' + divId).text(sectionMessageCount);
    }

    $(function () {
        window.totalMessages = '@Model.MessageCount';
        window.coordinatorId = '@Model.CoordinatorId';
        var sentMessages = '@Model.MessageStatusCounter.SentCount';
        var failedMessages = '@Model.MessageStatusCounter.FailedCount';
        var scheduledMessages = '@Model.MessageStatusCounter.ScheduledCount';
        var pausedMessages = '@Model.MessageStatusCounter.PausedCount';
        var waitingForSchedulingMessages = '@Model.MessageStatusCounter.WaitingForSchedulingCount';
        var cancelledMessages = '@Model.MessageStatusCounter.CancelledCount';
        setupProgressBar(sentMessages, failedMessages, scheduledMessages, pausedMessages, waitingForSchedulingMessages, cancelledMessages);

        $('input[name="timeToResume"]').datetimepicker({ dateFormat: 'dd/mm/yy' });
        $('input[name="finishTime"]').datetimepicker({ dateFormat: 'dd/mm/yy' });
        $('#UserTimeZone').val(jstz.determine().name());

        var schedule = $.connection.scheduleStatus;

        schedule.client.messageStatusUpdated = function (coordinatorId, sentCount, failedCount, scheduledCount, pausedCount, waitingForSchedulingCount, cancelledCount) {
            if (coordinatorId == window.coordinatorId){
                setupProgressBar(sentCount, failedCount, scheduledCount, pausedCount, waitingForSchedulingCount, cancelledCount);
            }
        };
        
        schedule.client.coordinatorCompleted = function (message) {
            var coordinatorSummary = "<div>Current Status: Complete</div>" +
                "<div>Completion Date: " + message.CompletedAt + "</div>";
            $('#' + message.CoordinatorId).html(coordinatorSummary);
        };
        
        // Start the connection
        $.connection.hub.start();

        $("#pauseForm").submit(function () {
            return confirm("Are you sure you want to pause the current coordinator?");
        });
    });

</script>

<h2>SMS And Email Scheduling</h2>
<div>ID : @Model.CoordinatorId</div>


<div id="@Model.CoordinatorId">
    <div class="control-group">Current Status: @Model.CurrentStatus.ToString()</div>
    @if (Model.CurrentStatus != CoordinatorStatusTracking.Completed)
    {
        if (Model.CurrentStatus == CoordinatorStatusTracking.Started)
        {
            <div>
                @using(Html.BeginForm("Pause", "Coordinator", FormMethod.Post, new { id = "pauseForm" }))
                {
                    @Html.HiddenFor(m => m.CoordinatorId)
                    @*<input type="submit" value="Pause Message Sending"/>*@
                }
            </div>
        }
        if (Model.CurrentStatus == CoordinatorStatusTracking.Paused)
        {
            <div>
                @using(Html.BeginForm("Resume", "Coordinator", FormMethod.Post, new { id = "resumeForm" }))
                {
                    @Html.HiddenFor(m => m.CoordinatorId)
                    <div class="control-group">
                        <label>Time to resume</label>
                        @Html.Editor("timeToResume")
                        @Html.ValidationMessage("timeToResume")
                    </div>
                    
                    <div class="control-group">
                        <label>Finish Time (optional)</label>
                        @Html.Editor("finishTime")
                        @Html.ValidationMessage("finishTime")
                        <div><sup>This will update the timing of messages instead of just updating the schedule.</sup></div>
                    </div>
                    @Html.Hidden("UserTimeZone");
                    
                    @*<input type="submit" value="Resume Messages"/>*@
                }
            </div>
        }
    }
    @if(Model.CompletionDateUtc.HasValue)
    {
        <div>Completion Date: @Model.CompletionDateUtc.Value.ToLocalTime()</div>

    }
</div>

<table class="table">
    <tr>
        <th>Number of Messages</th>
        <td>@Model.MessageCount</td>
    </tr>
    <tr>
        <th>Message Body</th>
        <td>@Model.MessageBody</td>
    </tr>
    @if (Model.CurrentStatus == CoordinatorStatusTracking.Started)
    {
        if (Model.NextScheduledMessageDate != null)
        {
            <tr>
                <th>Next Scheduled Message (UTC)</th>
                <td>
                    @if (Model.NextScheduledMessageDate == null){
                        @:"Waiting for scheduling"
                    } else {
                        @Model.NextScheduledMessageDate
                    }
                </td>
            </tr>
        }
        if (Model.FinalScheduledMessageDate != null)
         {
             <tr>
                 <th>Final Scheduled Message (UTC)</th>
                 <td>
                     @if (Model.FinalScheduledMessageDate == null)
                     {
                        @:"Waiting for scheduling"
                     } else {
                        @Model.FinalScheduledMessageDate  
                     }
                 </td>
             </tr>
         }
    }
</table>
<div class="progress active" style="max-width: 100%;">
    <div class="bar bar-info" id="progress_waiting" title="Waiting to be scheduled"></div>
    <div class="bar bar-info" id="progress_scheduled" title="Scheduled to be sent"></div>
    <div class="bar bar-info" id="progress_paused" title="Paused"></div>
    <div class="bar bar-success" id="progress_success" title="Delivered!"></div>
    <div class="bar bar-danger" id="progress_failed" title="Delivery failed"></div>
    <div class="bar bar-danger" id="progress_cancelled" title="Cancelled"></div>
</div>

